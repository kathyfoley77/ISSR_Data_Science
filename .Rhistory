}
filenames <- list(1:11)
for (i in 100:110){
assign(paste((i, "_senmatrix.txt", sep="")))
filenames <- c(filenames, temp)
}
filenames <- list(1:11)
for (i in 100:110){
assign(paste(i, "_senmatrix.txt", sep=""))
filenames <- c(filenames, temp)
}
filenames <- list(1:11)
for (i in 100:110){
one.filename <- (paste(i, "_senmatrix.txt", sep=""))
filenames <- c(filenames, one.filename)
}
filenames <- list()
for (i in 100:110){
one.filename <- (paste(i, "_senmatrix.txt", sep=""))
filenames <- c(filenames, one.filename)
}
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
Raw_Data_List <- c(,temp)
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
Raw_Data_List <- list()
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
Raw_Data_List <- c(Raw_Data_List,temp)
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
Raw_Data_List <- list()
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
Raw_Data_List <- c(Raw_Data_List,temp)
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
Raw_Data_List <- list()
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
Raw_Data_List[[i]] <- temp
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
i <- 1
temp <- read.csv(filenames[[i]])
Raw_Data_List[[i]] <- temp
Raw_Data_List <- list()
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
i <- 1
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
Raw_Data_List[[i]] <- temp
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
rm(list = ls())
filenames <- list()
for (i in 100:110){
one.filename <- (paste(i, "_senmatrix.txt", sep=""))
filenames <- c(filenames, one.filename)
}
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
Raw_Data_List[[i]] <- temp
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
Raw_Data_List <- list()
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
Raw_Data_List[[i]] <- temp
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
Raw_Data_List <- list()
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
print(i)
Raw_Data_List[[i]] <- temp
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
Raw_Data_List <- list()
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
print(i)
Raw_Data_List[i] <- temp
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
to create a vector of filenames.
filenames <- list()
for (i in 100:110){
one.filename <- (paste(i, "_senmatrix.txt", sep=""))
filenames <- c(filenames, one.filename)
}
i <- 1
temp <- read.csv(filenames[[i]])
print(i)
Raw_Data_List[[i]] <- temp
Raw_Data_List <- list()
Raw_Data_List[[i]] <- temp
return(Raw_Data_List)
ed to create a vector of filenames.
filenames <- list()
for (i in 100:110){
one.filename <- (paste(i, "_senmatrix.txt", sep=""))
filenames <- c(filenames, one.filename)
}
Raw_Data_List <- list()
Read_In_Data <- function(filenames){
#' you will want to loop over the vector of filenames and load each one in to
#' a slot in the Raw_Data_List object you create before returning it. Printing
#' out progress would be nice!
for (i in 1:length(filenames)){
temp <- read.csv(filenames[[i]])
print(i)
Raw_Data_List[[i]] <- temp
return(Raw_Data_List)
}
}
Read_In_Data(filenames)
head(Raw_Data_List)
#' get filenames
mywd <- "~/Dropbox/RA_and_Consulting_Work/ISSR_Data_Science_Summer_Summit_15/Data"
setwd(mywd)
filenames <- NULL
for(i in 100:110){
filenames <- append(filenames, paste(i,"_senmatrix.txt", sep = ""))
}
# define the function
Read_In_Data <- function(filenames){
Raw_Data_List <- vector(mode = "list", length = length(filenames))
for(i in 1:length(filenames)){
cat("Current Dataset", i,"\n")
Raw_Data_List[[i]] <- read.csv(filenames[i], stringsAsFactors = F, header = F)
}
return(Raw_Data_List)
}
head(Raw_Data_List)
Generate_Sociomatrix <- function(list_index, raw_data_list, num_bills){
#' takes in a list index, extracts the right raw data object from the raw data
#' list object, iterates over a specified number of
#' columns (bills) and returns a square (direted) sociomatrix
return(Sociomatrix)
}
# define function
Generate_Sociomatrix <- function(list_index, raw_data_list, num_bills){
#' takes in a list index, extracts the right raw data object from the raw data
#' list object, iterates over a specified number of
#' columns (bills) and returns a square (direted) sociomatrix
temp <- raw_data_list[[list_index]]
#create a sociomatrix to populate
num_senators <- length(temp[,1])
Sociomatrix <- matrix(0,ncol = num_senators, nrow = num_senators)
# this is an example of nested looping
for(j in 1:num_bills){#for every bill
cat("Current Index:",list_index,"Bill:",j,"of",length(temp[1,]),"\n")
#find out who the bill sponsor is (coded as a 1)
for(k in 1: length(temp[,1])){ #for every Senator
if(temp[k,j] == 1){
sponsor <- k
}
}
#find all of the cosponsors
for(k in 1: length(temp[,1])){ #for every Senator
if(temp[k,j] == 2){
Sociomatrix[sponsor,k] <- Sociomatrix[sponsor,k] + 1
}
}
}
return(Sociomatrix)
}
PreProcess_Network_Data <- function(filenames, num_bills, num_cores){
# num_bills = 2
# num_cores = 2
Raw_Data <- Read_In_Data(filenames)
cat("Processing Data into Sociomatricies... \n")
# Packages:
require(doMC)
require(foreach)
# Register number of cores
registerDoMC(num_cores)
# Run analysis in parallel
wrapper <- function(index){
print(index)
max_num_bills <- length(Raw_Data[[index]][1,])
if(num_bills> max_num_bills){
num_bills <- max_num_bills
}
result <- Generate_Sociomatrix(index,Raw_Data,num_bills)
return(result)
}
Sociomatrix_List <- foreach(i=1:length(filenames)) %dopar% {
result <- wrapper(i)
}
#' read in the data an generate an internal raw data list object. Then use
#' parallel processing (one of the three functions we discussed) to process
#' the data and return a list containing all sociomatricies. Try different
#' approaches and see which is fastest?
return(Sociomatrix_List)
}
system.time({
Result <- PreProcess_Network_Data(filenames,10,4)
})
#'    user  system elapsed
#'  43.303   1.646  49.726
system.time({
Result <- PreProcess_Network_Data(filenames,10,1)
})
#'    user  system elapsed
#'  48.914   0.875  66.553
library (doMC)
install.packages("doMC")
# define function
Generate_Sociomatrix <- function(list_index, raw_data_list, num_bills){
#' takes in a list index, extracts the right raw data object from the raw data
#' list object, iterates over a specified number of
#' columns (bills) and returns a square (direted) sociomatrix
temp <- raw_data_list[[list_index]]
#create a sociomatrix to populate
num_senators <- length(temp[,1])
Sociomatrix <- matrix(0,ncol = num_senators, nrow = num_senators)
# this is an example of nested looping
for(j in 1:num_bills){#for every bill
cat("Current Index:",list_index,"Bill:",j,"of",length(temp[1,]),"\n")
#find out who the bill sponsor is (coded as a 1)
for(k in 1: length(temp[,1])){ #for every Senator
if(temp[k,j] == 1){
sponsor <- k
}
}
#find all of the cosponsors
for(k in 1: length(temp[,1])){ #for every Senator
if(temp[k,j] == 2){
Sociomatrix[sponsor,k] <- Sociomatrix[sponsor,k] + 1
}
}
}
return(Sociomatrix)
}
PreProcess_Network_Data <- function(filenames, num_bills, num_cores){
# num_bills = 2
# num_cores = 2
Raw_Data <- Read_In_Data(filenames)
cat("Processing Data into Sociomatricies... \n")
# Packages:
require(doMC)
require(foreach)
# Register number of cores
registerDoMC(num_cores)
# Run analysis in parallel
wrapper <- function(index){
print(index)
max_num_bills <- length(Raw_Data[[index]][1,])
if(num_bills> max_num_bills){
num_bills <- max_num_bills
}
result <- Generate_Sociomatrix(index,Raw_Data,num_bills)
return(result)
}
Sociomatrix_List <- foreach(i=1:length(filenames)) %dopar% {
result <- wrapper(i)
}
#' read in the data an generate an internal raw data list object. Then use
#' parallel processing (one of the three functions we discussed) to process
#' the data and return a list containing all sociomatricies. Try different
#' approaches and see which is fastest?
return(Sociomatrix_List)
}
system.time({
Result <- PreProcess_Network_Data(filenames,10,4)
})
#'    user  system elapsed
#'  43.303   1.646  49.726
system.time({
Result <- PreProcess_Network_Data(filenames,10,1)
})
#'    user  system elapsed
#'  48.914   0.875  66.553
install.packages("doMC")
Raw_Data <- Read_In_Data(filenames)
require(doMC)
require(foreach)
Rcpp::sourceCpp('scripts/C++ code.cpp')
Rcpp::sourceCpp('scripts/C++code.cpp')
Rcpp::sourceCpp('scripts/C++code.cpp')
install.packages("Rtools")
Rcpp::sourceCpp('scripts/C++code.cpp')
Rcpp::sourceCpp('scripts/C++code.cpp')
Rcpp::sourceCpp('scripts/Example_Cpp_Function.cpp')
install.packages("Rcpp")
install.packages("RcppArmadillo")
Rcpp::sourceCpp('scripts/C++code.cpp')
Rcpp::sourceCpp('scripts/C++code.cpp')
Rcpp::sourceCpp('scripts/C++code.cpp')
install.packages("Rtools")
library(stringr)
library(plyr)
using namespace stringr
using namespace stringr;
using namespace (stringr)
Rcpp::sourceCpp('scripts/C++code.cpp')
Rcpp::sourceCpp('scripts/C++code.cpp')
install.packages("Rtools")
Rcpp::sourceCpp('scripts/C++code.cpp')
library(stringr)
library(scrapeR)
load("Bill_URLs.Rdata")
Clean_String <- function(string){
# Lowercase
temp <- tolower(string)
# Remove everything that is not a number letter ? or !
temp <- stringr::str_replace_all(temp,"[^a-zA-Z\\s:\\?\\!]", " ")
# Shrink down to just one white space
temp <- stringr::str_replace_all(temp,"[\\s]+", " ")
# Split it
temp <- stringr::str_split(temp, " ")[[1]]
# Get rid of trailing "" if necessary
indexes <- which(temp == "")
if(length(indexes) > 0){
temp <- temp[-indexes]
}
return(temp)
}
#' function to clean text
Clean_Text_Block <- function(text){
if(length(text) <= 1){
# Check to see if there is any text at all with another conditional
if(length(text) == 0){
cat("There was no text in this bill! \n")
to_return <- list(num_tokens = 0, unique_tokens = 0, text = "")
}else{
# If there is , and only only one line of text then tokenize it
clean_text <- Clean_String(text)
num_tok <- length(clean_text)
num_uniq <- length(unique(clean_text))
to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)
}
}else{
# Get rid of blank lines
indexes <- which(text == "")
if(length(indexes) > 0){
text <- text[-indexes]
}
# Loop through the lines in the text and use the append() function to
clean_text <- Clean_String(text[1])
for(i in 2:length(text)){
# add them to a vector
clean_text <- append(clean_text,Clean_String(text[i]))
}
num_tok <- length(clean_text)
num_uniq <- length(unique(clean_text))
to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)
}
# Calculate the number of tokens and unique tokens and return them in a
# named list object.
return(to_return)
}
#' run on all bills
clean_bill_text <- vector(mode = "list",length = 100)
for(i in 1:100){
print(i)
clean_bill_text[[i]] <- Clean_Text_Block(bill.text.list[[i]]$text)
}
#' calculate: total_token_count, total_unique_words
total_token_count <- 0
all_tokens <- NULL
for(i in 1:100){
print(i)
#keep appending the tokens to a giant vector
all_tokens <- append(all_tokens,clean_bill_text[[i]]$text)
total_token_count <- total_token_count + clean_bill_text[[i]]$num_tokens
}
# get unique words
unique_words <- unique(all_tokens)
total_unique_words <- length(unique_words)
cat("There were a total of",total_token_count,"tokens used in all documents and the number of unique words is:",total_unique_words," \n" )
load("Bill_URLs.Rdata")
load ("Scraped Bill Text.Rdata")
Clean_String <- function(string){
# Lowercase
temp <- tolower(string)
# Remove everything that is not a number letter ? or !
temp <- stringr::str_replace_all(temp,"[^a-zA-Z\\s:\\?\\!]", " ")
# Shrink down to just one white space
temp <- stringr::str_replace_all(temp,"[\\s]+", " ")
# Split it
temp <- stringr::str_split(temp, " ")[[1]]
# Get rid of trailing "" if necessary
indexes <- which(temp == "")
if(length(indexes) > 0){
temp <- temp[-indexes]
}
return(temp)
}
#' function to clean text
Clean_Text_Block <- function(text){
if(length(text) <= 1){
# Check to see if there is any text at all with another conditional
if(length(text) == 0){
cat("There was no text in this bill! \n")
to_return <- list(num_tokens = 0, unique_tokens = 0, text = "")
}else{
# If there is , and only only one line of text then tokenize it
clean_text <- Clean_String(text)
num_tok <- length(clean_text)
num_uniq <- length(unique(clean_text))
to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)
}
}else{
# Get rid of blank lines
indexes <- which(text == "")
if(length(indexes) > 0){
text <- text[-indexes]
}
# Loop through the lines in the text and use the append() function to
clean_text <- Clean_String(text[1])
for(i in 2:length(text)){
# add them to a vector
clean_text <- append(clean_text,Clean_String(text[i]))
}
num_tok <- length(clean_text)
num_uniq <- length(unique(clean_text))
to_return <- list(num_tokens = num_tok, unique_tokens = num_uniq, text = clean_text)
}
# Calculate the number of tokens and unique tokens and return them in a
# named list object.
return(to_return)
}
#' run on all bills
clean_bill_text <- vector(mode = "list",length = 100)
for(i in 1:100){
print(i)
clean_bill_text[[i]] <- Clean_Text_Block(bill.text.list[[i]]$text)
}
#' calculate: total_token_count, total_unique_words
total_token_count <- 0
all_tokens <- NULL
for(i in 1:100){
print(i)
#keep appending the tokens to a giant vector
all_tokens <- append(all_tokens,clean_bill_text[[i]]$text)
total_token_count <- total_token_count + clean_bill_text[[i]]$num_tokens
}
# get unique words
unique_words <- unique(all_tokens)
total_unique_words <- length(unique_words)
cat("There were a total of",total_token_count,"tokens used in all documents and the number of unique words is:",total_unique_words," \n" )
install.packages("devtools")
Rcpp::sourceCpp('scripts/C++code.cpp')
Rcpp::sourceCpp('scripts/Cpluspluscode.cpp')
Rcpp::sourceCpp('scripts/Cpluspluscode.cpp')
Rcpp::sourceCpp('scripts/Cpluspluscode.cpp')
library devtools
library(devtools)
find_rtools()
library(devtools)
Rcpp::sourceCpp('scripts/Cpluspluscode.cpp')
install.packages("devtools")
library(devtools)
install.packages("Rtools")
install.packages("devtools")
