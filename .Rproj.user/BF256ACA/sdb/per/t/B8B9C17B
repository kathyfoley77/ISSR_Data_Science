{
    "contents" : "# Speed comparisons and looping examples. \n\n# === preliminaries === #\n#clear workspace\nrm(list = ls())\n#set your working directory\nsetwd(\"~/Dropbox/RA_and_Consulting_Work/ICPSR_Summer_14/HPC_Workshop_Materials\")\n\n\n# ============================================= #\n# ============== Day 1 Examples =============== #\n# ============================================= #\n\n# sum over a vector of length 10,000,000 using a loop in R\nsystem.time({\n    vect <- c(1:10000000)\n    total <- 0\n    for(i in 1:length(as.numeric(vect))){\n        total <- total + vect[i]\n    }\n    print(total)\n})\n\n# sum over the same vector using the built in su function in R whihc is coded in C\nsystem.time({\n    vect <- c(1:10000000)\n    total <- sum(as.numeric(vect))\n    print(total)\n})\n\n\n# generate a very sparse two column dataset \n#number of observations\nnumobs <- 100000000\n#observations we want to check\nvec <- rep(0,numobs)\n#only select 100 to check\nvec[sample(1:numobs,100)] <- 1\n#combine data\ndata <- cbind(c(1:numobs),vec)\n\n# sum only over the entries in the first column where the second column is equal to 1 using an R loop\nsystem.time({\n    total <- 0\n    for(i in 1:numobs){\n        if(data[i,2] == 1)\n        total <- total + data[i,1]\n    }\n    print(total)\n})\n\n#sum over the subset of observations where the second column is equal to 1 using the subset function (coded in C)\nsystem.time({\n    dat <- subset(data, data[,2] ==1)\n    total <- sum(dat[,1])\n    print(total)\n})\n\n# ============================================= #\n# ============== Day 2 Examples =============== #\n# ============================================= #\n\n# some preliminaries\n\n# create a vector\nmy_vector <- c(1:10)\nprint(my_vector)\n\n# get the length of the vector\nlength(my_vector)\n\n# comparison operators \n5 < 6\n5 > 6\n5 == 5\n5 != 6\n5 <= 5\n\n# example of a for() loop\nmy_vector <- c(20:30)\nfor(i in 1:length(my_vector)){\n    my_vector[i] <- sqrt(my_vector[i])\n}\n#display the result\nprint(my_vector)\n\n\n# example of a while() loop\nmy_vector <- c(20:30)\ncounter <- 1 #set the counter to 1\nwhile(counter <= length(my_vector)){\n    my_vector[counter] <- sqrt(my_vector[counter])\n    counter <- counter + 1 #increment the counter\n}\n#display the result\nprint(my_vector)\n\n# example of an if statement\nmy_vector <- c(20:30)\nfor(i in 1:length(my_vector)){\n    if(my_vector[i] == 25){\n        print(\"The square root is 5!\")\n    }\n}\n\n\n# you can also add in an else statement to do something else if the condition is not met.\nmy_vector <- c(20:30)\nfor(i in 1:length(my_vector)){\n    if(my_vector[i] == 25){\n        print(\"I am 25!\")\n    }else{\n        print(\"I am not 25!\")\n    }\n}\n\n\n#an example of a nested loop over all the entries of a matrix\n\n#create a matrix\nmy_matrix <- matrix(1:100,ncol=10,nrow=10)\n\n#loop over the columns inside the rows\nfor(i in 1:length(my_matrix[,1])){ #loop over rows\n    for(j in 1:length(my_matrix[1,])){ #loop over columns\n        if(my_matrix[i,j] %% 2 == 0){ #check to see if the entry is even\n            my_matrix[i,j] <- 0\n        }\n    }\n}\n#display the result\nprint(my_matrix)\n\n\n# create a lsit to store some R objects \n\n# Create an empty list\nmy_list <- vector(\"list\", length = 10)\n# Create a list from objects\nmy_list <- list(10, \"dog\",c(1:10))\n# Add a sublist to a list\nmy_list <- append(my_list, list(list(27,14,\"cat\")))\n\n\n# an example of paralellization using the foreach package in R\n\n#create some toy data\ndata <- matrix(rnorm(10000000),nrow= 1000000,ncol = 100)\n\n#define a function that we are going to run in parallel\nmy_function <- function(col_number){ \n    #take the column sum of the matrix\n    col_sum <- sum(data[,col_number])\n    return(col_sum)\n}\n\n# Packages:\nrequire(doMC)\nrequire(foreach)\n# Register number of cores on your computer\nnCores <- 8\nregisterDoMC(nCores)\n# iterations\nN <- 100\n\n# Run analysis in serial\nsystem.time({\nserial_results <- rep(0,N)\nfor(i in 1:N){\n    serial_results[i] <- my_function(i)\n}\n})\n\n# Run analysis in parallel\nsystem.time({\nparallel_results <- foreach(i=1:N,.combine=rbind) %dopar% {\n    cur_result <- my_function(i)\n}\n})\n\n\n\n# example using snowfall parallelization in R\n\ndata <- matrix(rnorm(1000000),nrow= 100000,ncol = 100)\n\n#define a function that we are going to run in parallel\nmy_function <- function(col_number){ \n    #take the column sum of the matrix\n    col_sum <- sum(data[,col_number])\n    return(col_sum)\n}\n\n\n\n# Package:\nlibrary(snowfall)\n# Register cores\nnumcpus <- 2\nsfInit(parallel=TRUE, cpus=numcpus )\n# Check initialization\nif(sfParallel()){\n    cat( \"Parallel on\", sfCpus(), \"nodes.\\n\" )\n}else{\n    cat( \"Sequential mode.\\n\" )\n}\n￼\n\n￼# Export all packages\nfor (i in 1:length(.packages())){\n    eval(call(\"sfLibrary\", (.packages()[i]),\n              character.only=TRUE))\n}\n\n# Export a list of R data objects\nsfExport(\"data\")\n# Apply a function across the cluster\nindexes <- c(1:100)\nresult <- sfClusterApplyLB(indexes,my_function)\n# Stop the cluster\nsfStop()\nsum(unlist(result))\n\n\n# run jobs in parallel using mclapply (only works on a Mac or Linux Machine)\n\n# Packages:\nlibrary(parallel)\n\nnum_cpus <- 4\ndata <- matrix(rnorm(10000000),nrow= 1000000,ncol = 100)\n#additional argument\nvect <- rep(c(1:4),25)\n\n\n#define a function with two arguments that we are going to run in parallel\nmy_function <- function(col_number,multiply_by){ \n    #take the column sum of the matrix\n    col_sum <- sum(data[,col_number])\n    col_sum <- col_sum*multiply_by\n    return(col_sum)\n}\n\n# Wrapper Function\nrun_on_cluster <- function(i){\n    temp <- my_function(i, vect[i])\n    return(temp)\n}\n# Run analysis\nindexes <- 1:100\nResult  <- mclapply(indexes, run_on_cluster, mc.cores = num_cpus)\n\n\n# run analysis of a large dataset using biglm package\n\n# load package:\nlibrary(biglm)\ndata <- matrix(rnorm(10000000),nrow= 1000000,ncol = 100)\ndata <- cbind(round(runif(1000000),0),data)\n# Data must be of data.frame type\ndata <- as.data.frame(data)\n\n\n# Use variable names in formula\nstr <- \"V1 ~ V2 + V3 + V4 + V5 + V6\"\n\n# run model using bigglm function\nmodel<- bigglm(as.formula(str),\n               data = data, \n               family=binomial(), \n               maxit = 20) \n\n# run the same model using the standard glm package\nmodel2<- glm(as.formula(str),\n               data = data, \n               family=binomial(), \n               maxit = 20)\n\n\n\n\n\n\n\n",
    "created" : 1433266424732.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3344359942",
    "id" : "B8B9C17B",
    "lastKnownWriteTime" : 1433266440,
    "path" : "~/GitHub/ISSR_Data_Science/HPC_Programming_Example.R",
    "project_path" : "HPC_Programming_Example.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}